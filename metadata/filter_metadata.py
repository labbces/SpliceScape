import sqlite3
import argparse
import sys

# Argument parsing
parser = argparse.ArgumentParser(description="Filter get_metadata database")
parser.add_argument('-db', '--database', metavar='database.db',
                    type=str, help='SQLite3 database file generated by get_metadata.py.', required=True)
parser.add_argument('-l', '--read_length', metavar='read_length',
                    type=float, help='Filter by read length.', required=False, default=100)
parser.add_argument('-f', '--filters', metavar='filter_column',
                    nargs='+', choices=['pmid', 'species_cultivar', 'species_genotype', 'treatment', 'dev_stage', 'tissue', 'age', 'source_name'],
                    help='Filter to include rows where specified columns are not empty.', required=False)
parser.add_argument('-s', '--strand', metavar='strand_info', choices=['PAIRED', 'SINGLE', 'NULL'], nargs='+',
                    help='Filter to include rows where strand_info is PAIRED, SINGLE, or NULL.', required=False)
parser.add_argument('--create_table', action='store_true',
                    help="Create filtered_sra_metadata table in the database.")
parser.add_argument('--output_file', metavar='output.txt',
                    type=str, help='Output file for saving the sra_id values.', required=True)
parser.add_argument('--verbose', action='store_true')
args = parser.parse_args()

db = args.database
read_length = args.read_length
filters = args.filters if args.filters else []
strand = args.strand
output_file = args.output_file

# Connecting to the database
conn = sqlite3.connect(db)
cursor = conn.cursor()

# Checking if sra_metadata and required columns exist in db


def table_exists(cursor, table_name):
    cursor.execute(
        "SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
    return cursor.fetchone() is not None


def column_exists(cursor, table_name, column_name):
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in cursor.fetchall()]
    return column_name in columns


if table_exists(cursor, 'sra_metadata'):
    if column_exists(cursor, 'sra_metadata', 'number_of_bases') and column_exists(cursor, 'sra_metadata', 'number_of_spots'):
        # Check if the new column already exists and add it if it doesn't
        if not column_exists(cursor, 'sra_metadata', 'average_read_length'):
            cursor.execute(
                "ALTER TABLE sra_metadata ADD COLUMN average_read_length REAL")
            conn.commit()

            # Update the new column with the calculated average read length
            cursor.execute("""
                UPDATE sra_metadata
                SET average_read_length = number_of_bases / number_of_spots
            """)
            conn.commit()
        else:
            if args.verbose:
                print(
                    f"Column 'average_read_length' already exists in {db}. Filling up only NULL lines.")

        cursor.execute("""
            UPDATE sra_metadata
            SET average_read_length = number_of_bases / number_of_spots
            WHERE average_read_length IS NULL OR average_read_length = 0
        """)
        conn.commit()
    else:
        print("Required columns 'number_of_bases' or 'number_of_spots' do not exist.")
        conn.close()
        sys.exit()
else:
    print("Table 'sra_metadata' does not exist.")
    conn.close()
    sys.exit()

if args.verbose:
    print(f"Column 'average_read_length' filled up.")

# Base queries
count_query = "SELECT COUNT(*) FROM sra_metadata WHERE 1=1"
select_query = "SELECT sra_id FROM sra_metadata WHERE 1=1"
insert_query = """
INSERT INTO filtered_sra_metadata
SELECT * FROM sra_metadata
WHERE 1=1
AND sra_id NOT IN (SELECT sra_id FROM filtered_sra_metadata)
"""

# Filtering
params = []

# Read length
if read_length is not None:
    select_query += " AND average_read_length >= ?"
    insert_query += " AND average_read_length >= ?"
    count_query += " AND average_read_length >= ?"
    params.append(read_length)

# Dynamic filters
for filter_column in filters:
    if column_exists(cursor, 'sra_metadata', filter_column):
        select_query += f" AND {filter_column} IS NOT NULL AND {filter_column} != ''"
        insert_query += f" AND {filter_column} IS NOT NULL AND {filter_column} != ''"
        count_query += f" AND {filter_column} IS NOT NULL AND {filter_column} != ''"

# Strand info filter
first_condition = True
if strand:
    if column_exists(cursor, 'sra_metadata', 'strand_info'):
        if 'NULL' in strand:
            if first_condition:
                condition = "AND"
                first_condition = False
            else:
                condition = "OR"
            select_query += f" {condition} (strand_info IS NULL OR strand_info = '')"
            insert_query += f" {condition} (strand_info IS NULL OR strand_info = '')"
        if 'PAIRED' in strand:
            if first_condition:
                condition = "AND"
                first_condition = False
            else:
                condition = "OR"
            select_query += f" {condition} strand_info = ?"
            insert_query += f" {condition} strand_info = ?"
            params.append('PAIRED')
        if 'SINGLE' in strand:
            if first_condition:
                condition = "AND"
                first_condition = False
            else:
                condition = "OR"
            select_query += f" {condition} strand_info = ?"
            insert_query += f" {condition} strand_info = ?"
            params.append('SINGLE')
    else:
        print("Column 'strand_info' does not exist in 'sra_metadata'.")
        conn.close()
        sys.exit()

# Option to create filtered_sra_metadata table
if args.create_table:
    # Create filtered_sra_metadata table if it doesn't exist
    create_table_query = """
    CREATE TABLE IF NOT EXISTS filtered_sra_metadata AS
    SELECT * FROM sra_metadata WHERE 1=0
    """
    cursor.execute(create_table_query)

    # Insert filtered data into filtered_sra_metadata only if not already present
    cursor.execute(insert_query, params)
    conn.commit()

    if args.verbose:
        print(f"Table 'filtered_sra_metadata' created and filled with filtered data.")

# Fetch sra_id values and export them to the output file
cursor.execute(select_query, params)
sra_ids = cursor.fetchall()

# Write the sra_id values to the output file
with open(output_file, 'w') as f:
    for sra_id in sra_ids:
        f.write(f"{sra_id[0]}\n")

if args.verbose:
    print(f"sra_id values saved to {output_file}.")

# Close the connection
conn.close()
